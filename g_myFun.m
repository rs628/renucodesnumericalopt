% Generated by ADiMat 0.6.6-5530 (00419e1f)
% Copyright 2009-2013 Johannes Willkomm, Fachgebiet Scientific Computing,
% TU Darmstadt, 64289 Darmstadt, Germany
% Copyright 2001-2008 Andre Vehreschild, Institute for Scientific Computing,
% RWTH Aachen University, 52056 Aachen, Germany.
% Visit us on the web at http://www.adimat.de
% Report bugs to johannes@johannes-willkomm.de
%
%
%                             DISCLAIMER
%
% ADiMat was prepared as part of an employment at the Institute
% for Scientific Computing, RWTH Aachen University, Germany and is
% provided AS IS. NEITHER THE AUTHOR(S), THE GOVERNMENT OF THE FEDERAL
% REPUBLIC OF GERMANY NOR ANY AGENCY THEREOF, NOR THE RWTH AACHEN UNIVERSITY,
% INCLUDING ANY OF THEIR EMPLOYEES OR OFFICERS, MAKES ANY WARRANTY,
% EXPRESS OR IMPLIED, OR ASSUMES ANY LEGAL LIABILITY OR RESPONSIBILITY
% FOR THE ACCURACY, COMPLETENESS, OR USEFULNESS OF ANY INFORMATION OR
% PROCESS DISCLOSED, OR REPRESENTS THAT ITS USE WOULD NOT INFRINGE
% PRIVATELY OWNED RIGHTS.
%
% Global flags were:
% FORWARDMODE -- Apply the forward mode to the files.
% NOOPEROPTIM -- Do not use optimized operators. I.e.:
%		 g_a*b*g_c -/-> mtimes3(g_a, b, g_c)
% NOLOCALCSE  -- Do not use local common subexpression elimination when
%		 canonicalizing the code.
% NOGLOBALCSE -- Prevents the application of global common subexpression
%		 elimination after canonicalizing the code.
% NOPRESCALARFOLDING -- Switch off folding of scalar constants before
%		 augmentation.
% NOPOSTSCALARFOLDING -- Switch off folding of scalar constants after
%		 augmentation.
% NOCONSTFOLDMULT0 -- Switch off folding of product with one factor
%		 being zero: b*0=0.
% FUNCMODE    -- Inputfile is a function (This flag can not be set explicitly).
% NOTMPCLEAR  -- Suppress generation of clear g_* instructions.
% UNBOUND_XML  -- Write list of unbound identifiers in XML format.
% DEPENDENCIES_XML  -- Write list of functions in XML format.
% UNBOUND_ERROR	-- Stop with error if unbound identifiers found (default).
% FUNCTION_LIST_XML	-- Write list of functions to XML file.
% VERBOSITYLEVEL=5
% AD_IVARS= x
% AD_DVARS= r

function [g_r, r]= g_myFun(g_x, x)
   
   g_tmp_x_00000= g_x(2);
   tmp_x_00000= x(2);
   g_tmp_x_00001= g_x(1);
   tmp_x_00001= x(1);
   g_tmp_myFun_00000= adimat_g_pow_left(g_tmp_x_00001, tmp_x_00001, 2);
   tmp_myFun_00000= tmp_x_00001^ 2;
   g_tmp_myFun_00001= g_tmp_x_00000- g_tmp_myFun_00000;
   tmp_myFun_00001= tmp_x_00000- tmp_myFun_00000;
   g_tmp_myFun_00002= adimat_g_pow_left((g_tmp_myFun_00001), (tmp_myFun_00001), 2);
   tmp_myFun_00002= tmp_myFun_00001^ 2;
   g_tmp_myFun_00003= 100* g_tmp_myFun_00002;
   tmp_myFun_00003= 100* tmp_myFun_00002;
   g_tmp_x_00002= g_x(1);
   tmp_x_00002= x(1);
   g_tmp_myFun_00004= -g_tmp_x_00002+ g_zeros(1);
   tmp_myFun_00004= 1- tmp_x_00002;
   g_tmp_myFun_00005= adimat_g_pow_left((g_tmp_myFun_00004), (tmp_myFun_00004), 2);
   tmp_myFun_00005= tmp_myFun_00004^ 2;
   g_r= g_tmp_myFun_00003+ g_tmp_myFun_00005;
   r= tmp_myFun_00003+ tmp_myFun_00005; 

end
